server {
	listen 443 ssl;
	listen [::]:443 ssl; # Localhost on IPv4 and IPv6, sets explicitely that all connection must be ssl;
	# If you do not specify an IP address, Nginx will listen on all available interfaces for the specified port.

	server_name  localhost:443 asepulve.42.fr www.asepulve.42.fr;

	# Certitication and key as created in Docker:
	ssl_certificate /etc/nginx/ssl/asepulve.crt;
	ssl_certificate_key /etc/nginx/ssl/asepulve.key;

	# Specification of the allowed protocol version:
	ssl_protocols TLSv1.2 TLSv1.3;

	# Sets the working directory of nginx to /var/www/html, it will be the next root:
	root /var/www/html/asepulve.42.fr;
	index index.php;
	# Tries to serve static files in case they do not exist it'll fallback to index.php which can handle dinamic requests:

	location / {
		### https://enable-cors.org/server_nginx.html
		# Allow cors to work as expected

		if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
		}
		if ($request_method = 'POST') {
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
			add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
		}
		if ($request_method = 'GET') {
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
			add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
		}

		# Check if the file exists, it none of the files exists it passes to the named location.
		try_files $uri $uri/ index.php?$args;
		index index.php;
	}


	# Case insensitive matching for static file, set the max-age header to a year so browser won't be requesting over time. 
	#Technically improves performance due caching in the browser side.
	# This location has a higher specifity over location /.
	location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
		expires max;
		log_not_found off;
	}

	# Defines a location with case sensitive regex modifier for all of the URI that ends with .php:
	location ~ \.php$ {
		fastcgi_index index.php;
		# Includes the nginx params for the fastcgi. Sets the enviroments for the fastCGI application.
		include /etc/nginx/fastcgi_params; 
		# Can be either a path to a file or a ip for a server
		fastcgi_pass wordpress:9000;
		# Sets the parameter that should be passed to the fast-cgi server.
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	}

}


# http://nginx.org/en/docs/http/ngx_http_core_module.html#listen

# The ssl parameter (0.7.14) allows specifying that all connections accepted on this port should work in SSL mode. This allows for a more compact configuration for the server that handles both HTTP and HTTPS requests. 



### Bonus
### Adminer configuration

server {
	listen 4000;
	listen [::]:4000;

	server_name localhost;

	root /var/www/html/adminer;
	index index.php;

	location / {
		try_files $uri $uri/ /index.php?$args;
		index index.php;
	}

	location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
		expires max;
		log_not_found on;
	}

	location ~ \.php$ {
		fastcgi_index index.php;
		include /etc/nginx/fastcgi_params;
		fastcgi_pass adminer:9001;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	}
}

